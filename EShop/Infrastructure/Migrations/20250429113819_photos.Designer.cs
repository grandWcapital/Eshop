// <auto-generated />
using EShop.Interface.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EShop.Migrations
{
    [DbContext(typeof(EShopDbContext))]
    [Migration("20250429113819_photos")]
    partial class photos
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EShop.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "GPU и ускорители",
                            Name = "Видеокарты"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Остальные комплектующие",
                            Name = "Комплектующие"
                        });
                });

            modelBuilder.Entity("EShop.Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("numberInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Описание продукта 1",
                            Image = "/images/Без названия (1).jpg",
                            Name = "Без названия 1",
                            Price = 15.99m,
                            numberInStock = 10
                        },
                        new
                        {
                            Id = 2,
                            Description = "Описание продукта 2",
                            Image = "/images/Без названия.jpg",
                            Name = "Без названия 2",
                            Price = 12.49m,
                            numberInStock = 7
                        },
                        new
                        {
                            Id = 3,
                            Description = "Мощная видеокарта RTX 5090 — версия A",
                            Image = "/images/geforce-rtx-5090-af550-t@2x.jpg",
                            Name = "GeForce RTX 5090 A",
                            Price = 1999.99m,
                            numberInStock = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Мощная видеокарта RTX 5090 — версия B",
                            Image = "/images/geforce-rtx-5090-af550-t@2x.jpg",
                            Name = "GeForce RTX 5090 B",
                            Price = 1999.99m,
                            numberInStock = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Мощная видеокарта RTX 5090 — версия C",
                            Image = "/images/geforce-rtx-5090-af550-t@2x.jpg",
                            Name = "GeForce RTX 5090 C",
                            Price = 1999.99m,
                            numberInStock = 6
                        },
                        new
                        {
                            Id = 6,
                            Description = "Мощная видеокарта RTX 5090 — версия D",
                            Image = "/images/geforce-rtx-5090-af550-t@2x.jpg",
                            Name = "GeForce RTX 5090 D",
                            Price = 1999.99m,
                            numberInStock = 2
                        });
                });

            modelBuilder.Entity("EShop.Domain.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 1
                        });
                });

            modelBuilder.Entity("EShop.Domain.Models.ProductCategory", b =>
                {
                    b.HasOne("EShop.Domain.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.Domain.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EShop.Domain.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("EShop.Domain.Models.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
